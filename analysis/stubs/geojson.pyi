from typing import Any, Callable, Dict, Generator, List, Optional, Tuple, Union

# Types
Coordinates = Union[List[float], List[List[float]], List[List[List[float]]], List[List[List[List[float]]]]]
Properties = Dict[str, Any]
GeometryType = Union['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection']
CoordPair = Tuple[float, float]
BoundingBox = List[float]  # [lon_min, lat_min, lon_max, lat_max]

# Base classes
class GeoJSON(dict):
    def __init__(self, **extra: Any) -> None: ...
    def to_instance(self, obj: Any, strict: bool = ...) -> Any: ...
    def check_list_errors(self, func: Callable, items: List) -> List: ...
    def errors(self) -> Any: ...

class Geometry(GeoJSON):
    def __init__(self, coordinates: Optional[Coordinates] = None, validate: bool = False, 
                 precision: Optional[int] = None, **extra: Any) -> None: ...
    @classmethod
    def clean_coordinates(cls, coords: Any, precision: int) -> Any: ...
    def errors(self) -> Optional[str]: ...

class GeometryCollection(GeoJSON):
    def __init__(self, geometries: Optional[List[Geometry]] = None, **extra: Any) -> None: ...
    def errors(self) -> List[Any]: ...
    def __getitem__(self, key: Union[int, str]) -> Any: ...

# Geometry classes
class Point(Geometry):
    def errors(self) -> Optional[str]: ...

class MultiPoint(Geometry):
    def errors(self) -> Optional[str]: ...

class LineString(MultiPoint):
    def errors(self) -> Optional[str]: ...

class MultiLineString(Geometry):
    def errors(self) -> Optional[str]: ...

class Polygon(Geometry):
    def errors(self) -> Optional[str]: ...

class MultiPolygon(Geometry):
    def errors(self) -> Optional[str]: ...

# Feature classes
class Feature(GeoJSON):
    def __init__(self, id: Optional[Union[str, int]] = None, 
                 geometry: Optional[Geometry] = None, 
                 properties: Optional[Properties] = None, 
                 **extra: Any) -> None: ...
    def errors(self) -> Optional[Any]: ...

class FeatureCollection(GeoJSON):
    def __init__(self, features: List[Feature], **extra: Any) -> None: ...
    def errors(self) -> List[Any]: ...
    def __getitem__(self, key: Union[int, str]) -> Any: ...

# Functions
def coords(obj: Union[Feature, Geometry]) -> Generator[Tuple[float, ...], None, None]: ...
def map_coords(func: Callable[[float], float], obj: Geometry) -> Dict[str, Any]: ...
def map_tuples(func: Callable[[Tuple[float, ...]], Tuple[float, ...]], obj: Geometry) -> Dict[str, Any]: ...
def map_geometries(func: Callable, obj: GeoJSON) -> Any: ...
def generate_random(featureType: str, numberVertices: int = 3, 
                   boundingBox: BoundingBox = [-180.0, -90.0, 180.0, 90.0]) -> Geometry: ...

# Encoding/Decoding
def dump(obj: Any, fp: Any, **kwargs: Any) -> None: ...
def dumps(obj: Any, **kwargs: Any) -> str: ...
def load(fp: Any, **kwargs: Any) -> Any: ...
def loads(s: str, **kwargs: Any) -> Any: ...

class GeoJSONEncoder:
    def default(self, obj: Any) -> Any: ...

# Version info
__version__: str
__version_info__: Tuple[int, ...]